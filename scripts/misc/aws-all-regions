#!/bin/env zsh

# --- 設定 ---
# スクリプト名を明示的に設定
SCRIPT_NAME="aws-all-regions"

# エラーが発生した場合、またはパイプラインのいずれかのコマンドが失敗した場合にスクリプトを終了します
set -e
set -o pipefail

# --- オプション解析 ---
# デフォルトではデバッグ出力なし
DEBUG=0
# デフォルトのAWSコマンド
AWS_COMMAND=""
# 指定されたリージョンを格納する配列
SPECIFIED_REGIONS=()

# ヘルプメッセージの表示関数
show_help() {
  cat << EOF >&2
使用法: ${SCRIPT_NAME} [オプション] [-- コマンド]

オプション:
  -d    デバッグモードを有効化（処理過程を表示）
  -h    このヘルプメッセージを表示
  -r    処理対象のリージョンを指定（複数指定可能）
        例: ${SCRIPT_NAME} -r us-east-1 -r ap-northeast-1 -- aws ec2 describe-instances

引数:
  -- コマンド    実行するAWSコマンド
                例: ${SCRIPT_NAME} -- aws ec2 describe-instances

説明:
  AWSからリージョン情報を取得し、指定されたコマンドを各リージョンで実行してJSON形式で出力します。
  -rオプションでリージョンを指定すると、指定したリージョンのみで実行します。
  リージョン指定がない場合は、すべてのリージョンで実行します。
  出力されたJSONはパイプでjqに渡して処理できます。
EOF
  exit 0
}

# オプション解析
while [[ $# -gt 0 ]]; do
  case "$1" in
    -d)
      DEBUG=1
      shift
      ;;
    -h)
      show_help
      ;;
    -r)
      shift
      if [[ -n "$1" ]]; then
        SPECIFIED_REGIONS+=("$1")
        shift
      else
        echo "エラー: -rオプションにはリージョン名が必要です。" >&2
        exit 1
      fi
      ;;
    --)
      shift
      if [[ $# -gt 0 ]]; then
        AWS_COMMAND="$*"
      fi
      break
      ;;
    *)
      echo "不明なオプション: $1" >&2
      show_help
      ;;
  esac
done

# コマンドが指定されていない場合はエラーメッセージを表示して終了
if [[ -z "$AWS_COMMAND" ]]; then
  echo "エラー: AWSコマンドが指定されていません。" >&2
  echo "使用例: ${SCRIPT_NAME} -- aws ec2 describe-instances" >&2
  exit 1
fi

# デバッグ出力用の関数
debug() {
  if [[ $DEBUG -eq 1 ]]; then
    echo "$@" >&2
  fi
}

# --- AWS CLI コマンドの実行と jq による整形 ---

debug "使用するコマンド: $AWS_COMMAND"

# リージョン情報を設定
if [[ ${#SPECIFIED_REGIONS[@]} -gt 0 ]]; then
  debug "指定されたリージョンを使用します: ${SPECIFIED_REGIONS[*]}"
  regions=("${SPECIFIED_REGIONS[@]}")
else
  debug "AWSからすべてのリージョン情報を取得しています..."
  # リージョン情報を取得し、適切に配列に格納
  regions=($(aws ec2 describe-regions | jq -r '.Regions[].RegionName'))
fi

# 結果を格納する配列を初期化
results=()

# 各リージョンごとに処理
for region in "${regions[@]}"; do
  debug "リージョン $region を処理中..."
  
  # 該当リージョンでの指定コマンドを実行
  region_option="--region $region"
  
  # コマンドに--regionが含まれていない場合のみ追加
  if [[ ! "$AWS_COMMAND" =~ "--region" ]]; then
    command_to_run="$AWS_COMMAND $region_option"
  else
    command_to_run="$AWS_COMMAND"
  fi
  
  debug "実行コマンド: $command_to_run"
  lower_arr=$(eval $command_to_run | cat)
  
  # リージョンとその結果をJSONオブジェクトとして追加
  region_result=$(echo "{}" | jq --arg region "$region" --argjson data "$lower_arr" '{region: $region, result: {metadata_obj: $data}}')
  
  results+=("$region_result")
done

# 配列を結合してJSON配列にする
output_json=$(printf '%s\n' "${results[@]}" | jq -s '.')

# JSONのみを標準出力に出力（パイプでjqに渡せる純粋なJSON）
echo "$output_json"

debug "JSONの生成が完了しました。"

# スクリプトが正常に終了したことを示す終了コード
exit 0
